plugins {
    id("com.android.application")
    id("com.github.triplet.play") version "3.2.0"
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'com.google.firebase.crashlytics'

android {
    compileSdkVersion 30
    buildToolsVersion '29.0.3'
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        initGoogleServicesJson()
        initPlayStoreApiKeys()

        buildConfigField "String", "BASIC_AUTH_USER", "\"${getBasicAuthUser()}\""
        buildConfigField "String", "BASIC_AUTH_PASSWORD", "\"${getBasicAuthPassword()}\""
    }
    buildFeatures {
        viewBinding = true
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        freeCompilerArgs = freeCompilerArgs + "-Xallow-result-return-type"
    }
    signingConfigs {
        release {
            storeFile file("../release.keystore")
            storePassword loadStorePassword()
            keyAlias loadKeyAlias()
            keyPassword loadKeyPassword()
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"

            buildConfigField "String", "BASE_URL_WS", "\"http://seldon-nas.dnset.com:7070/filmoteca-ws/dev/\""
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            buildConfigField "String", "BASE_URL_WS", "\"http://seldon-nas.dnset.com:7070/filmoteca-ws/pro/\""
        }
    }
    flavorDimensions 'environment', 'location'
    productFlavors {
        real {
            dimension 'environment'
        }
        mock {
            dimension 'environment'
        }
        albacete {
            dimension 'location'

            applicationId "com.albandroid.filmoteca"
            versionCode 47
            versionName "1.3.5"

            buildConfigField "String", "BASE_URL_FILMOTECA", "\"http://www.albacete.es/\""
            buildConfigField "String", "REGION", "\"ab\""
        }
        valencia {
            dimension 'location'

            applicationId "com.vsa.filmoteca.cv"
            versionCode 1
            versionName "1.0.0"

            buildConfigField "String", "BASE_URL_FILMOTECA", "\"https://ivc.gva.es/\""
            buildConfigField "String", "REGION", "\"cv\""
        }
    }
    play {
        track = 'production'
        serviceAccountCredentials = file('../keys.json')
    }

}

androidExtensions {
    experimental = true
}

def getBasicAuthUser() {
    String user = System.getenv("BASIC_AUTH_USER")

    if (user == null) {
        println "BASIC AUTH USER NOT FOUND IN THE ENVIRONMENT"

        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
        user = properties.getProperty("basicauth.user")

        if (user == null)
            println "BASIC AUTH USER NOT FOUND IN THE PROPERTIES FILE"
    }

    return user
}

def getBasicAuthPassword() {
    String password = System.getenv("BASIC_AUTH_PASSWORD")

    if (password == null) {
        println "BASIC AUTH PASSWORD NOT FOUND IN THE ENVIRONMENT"

        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
        password = properties.getProperty("basicauth.password")

        if (password == null)
            println "BASIC AUTH PASSWORD NOT FOUND IN THE PROPERTIES FILE"
    }

    return password
}

def initPlayStoreApiKeys() {
    File keysJsonFile = file('../keys.json')
    if (keysJsonFile.exists()) {
        println "PLAY STORE KEYS JSON IS IN THE ROOT PROJECT DIR"
    } else {
        String playStoreKeysJsonEncoded = System.getenv('PLAY_STORE_KEYS_JSON')
        if (playStoreKeysJsonEncoded != null) {
            println "PLAY STORE KEYS JSON IS IN THE ENVIRONMENT"
            String playStoreKeysJsonDecoded = new String(playStoreKeysJsonEncoded.decodeBase64())
            keysJsonFile.write(playStoreKeysJsonDecoded)
        } else {
            println "CANT FIND PLAYSTORE KEYS"
        }
    }
}

def initGoogleServicesJson() {
    File googleServicesJsonFile = file('google-services.json')
    if (googleServicesJsonFile.exists()) {
        println "google-services.json IS IN THE ROOT PROJECT DIR"
    } else {
        String googleServicesJsonBase64 = System.getenv("GOOGLE_SERVICES_JSON")
        if (googleServicesJsonBase64 == null) {
            Properties properties = new Properties()
            properties.load(project.rootProject.file("local.properties").newDataInputStream())
            googleServicesJsonBase64 = properties.getProperty("google.services.json")
            if (googleServicesJsonBase64 != null)
                println "google-services.json IS IN THE local-properties"
        } else {
            println "google-services.json IS IN THE ENVIRONMENT"
        }
        if (googleServicesJsonBase64 == null) {
            println "CANT FIND google-services.json"
        } else {
            String googleServicesJsonDecoded = new String(googleServicesJsonBase64.decodeBase64())
            googleServicesJsonFile.write(googleServicesJsonDecoded)
            println "google-services.json SUCCESSFULLY CREATED"
        }
    }
}

def loadStorePassword() {
    String storePassword = System.getenv("STORE_PASSWORD")
    if (storePassword == null) {
        println "STORE_PASSWORD ENVIRONMENT VARIABLE NOT FOUND"
        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
        storePassword = properties.getProperty("store.password")
    } else {
        println "STORE_PASSWORD ENVIRONMENT VARIABLE FOUND"
    }
    return storePassword
}

def loadKeyAlias() {
    String keyAlias = System.getenv("KEY_ALIAS")
    if (keyAlias == null) {
        println "KEY_ALIAS ENVIRONMENT VARIABLE NOT FOUND"
        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
        keyAlias = properties.getProperty("key.alias")
    } else {
        println "KEY_ALIAS ENVIRONMENT VARIABLE FOUND"
    }
    return keyAlias
}

def loadKeyPassword() {
    String keyPassword = System.getenv("KEY_PASSWORD")
    if (keyPassword == null) {
        println "KEY_PASSWORD ENVIRONMENT VARIABLE NOT FOUND"
        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
        keyPassword = properties.getProperty("key.password")
    } else {
        println "KEY_PASSWORD ENVIRONMENT VARIABLE FOUND"
    }
    return keyPassword
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    //ANDROID SUPPORT LIBRARIES
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.exifinterface:exifinterface:1.3.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    //COROUTINES
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2'

    //FIREBASE
    implementation platform('com.google.firebase:firebase-bom:26.3.0')

    //CRASH REPORT
    implementation 'com.google.firebase:firebase-core'
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-analytics'

    //CLOUD MESSAGING
    implementation 'com.google.firebase:firebase-messaging'

    //REMOTE CONFIG
    implementation 'com.google.firebase:firebase-config'

    // UNIT TESTING
    testImplementation 'junit:junit:4.13.2'
    // Set this dependency if you want to use Mockito
    testImplementation 'org.mockito:mockito-core:3.7.7'
    // Set this dependency if you want to use Hamcrest matching
    testImplementation 'org.hamcrest:hamcrest-library:2.1'
    androidTestImplementation 'org.hamcrest:hamcrest-library:2.1'

    androidTestImplementation 'androidx.annotation:annotation:1.3.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'

    //GMS
    implementation 'com.google.android.play:core:1.10.2'

    // DEPENDENCY INJECTION
    implementation 'com.google.dagger:hilt-android:2.40'
    kapt 'com.google.dagger:hilt-compiler:2.40'

    // For instrumentation tests
    androidTestImplementation  'com.google.dagger:hilt-android-testing:2.40'
    kaptAndroidTest 'com.google.dagger:hilt-compiler:2.40'

    // For local unit tests
    testImplementation 'com.google.dagger:hilt-android-testing:2.40'
    kaptTest 'com.google.dagger:hilt-compiler:2.40'

    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.1'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.9.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.9.0'

    implementation 'org.jsoup:jsoup:1.13.1'
    implementation 'com.squareup.picasso:picasso:2.71828'

}
apply plugin: 'com.google.gms.google-services'
