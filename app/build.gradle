plugins {
    id("com.android.application")
    id("com.github.triplet.play") version "3.8.4"
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'com.google.firebase.crashlytics'
apply from: '../base.gradle'

android {
    defaultConfig {
        initGoogleServicesJson()
        initPlayStoreApiKeys()
    }
    buildFeatures {
        viewBinding true
    }
    signingConfigs {
        release {
            storeFile file("../release.keystore")
            storePassword loadStorePassword()
            keyAlias loadKeyAlias()
            keyPassword loadKeyPassword()
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"

            buildConfigField "String", "BASE_URL_WS", "\"http://seldon-nas.dnset.com:7070/filmoteca-ws/dev/\""
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            buildConfigField "String", "BASE_URL_WS", "\"http://seldon-nas.dnset.com:7070/filmoteca-ws/pro/\""
        }
    }
    flavorDimensions 'environment', 'location'
    productFlavors {
        real {
            dimension 'environment'
        }
        mock {
            dimension 'environment'
        }
        albacete {
            dimension 'location'

            applicationId "com.albandroid.filmoteca"
            versionCode 51
            versionName "1.3.9"

            buildConfigField "String", "BASE_URL_FILMOTECA", "\"http://www.albacete.es/\""
            buildConfigField "String", "REGION", "\"ab\""
        }
        valencia {
            dimension 'location'

            applicationId "com.vsa.filmoteca.cv"
            versionCode 1
            versionName "1.0.0"

            buildConfigField "String", "BASE_URL_FILMOTECA", "\"https://ivc.gva.es/\""
            buildConfigField "String", "REGION", "\"cv\""
        }
    }
    play {
        track = 'production'
        serviceAccountCredentials = file('../keys.json')
    }
    namespace 'com.vsa.filmoteca'
    lint {
        abortOnError false
    }

}

task assembleDebugAndroidTest {
    //This is a fake task to avoid the Circle CI error.
    //I don't know why Circle CI is trying to execute this task.
}

def initPlayStoreApiKeys() {
    File keysJsonFile = file('../keys.json')
    if (keysJsonFile.exists()) {
        println "PLAY STORE KEYS JSON IS IN THE ROOT PROJECT DIR"
    } else {
        String playStoreKeysJsonEncoded = System.getenv('PLAY_STORE_KEYS_JSON')
        if (playStoreKeysJsonEncoded != null) {
            println "PLAY STORE KEYS JSON IS IN THE ENVIRONMENT"
            String playStoreKeysJsonDecoded = new String(playStoreKeysJsonEncoded.decodeBase64())
            keysJsonFile.write(playStoreKeysJsonDecoded)
        } else {
            println "CANT FIND PLAYSTORE KEYS"
        }
    }
}

def initGoogleServicesJson() {
    File googleServicesJsonFile = file('google-services.json')
    if (googleServicesJsonFile.exists()) {
        println "google-services.json IS IN THE ROOT PROJECT DIR"
    } else {
        String googleServicesJsonBase64 = System.getenv("GOOGLE_SERVICES_JSON")
        if (googleServicesJsonBase64 == null) {
            Properties properties = new Properties()
            properties.load(project.rootProject.file("local.properties").newDataInputStream())
            googleServicesJsonBase64 = properties.getProperty("google.services.json")
            if (googleServicesJsonBase64 != null)
                println "google-services.json IS IN THE local-properties"
        } else {
            println "google-services.json IS IN THE ENVIRONMENT"
        }
        if (googleServicesJsonBase64 == null) {
            println "CANT FIND google-services.json"
        } else {
            String googleServicesJsonDecoded = new String(googleServicesJsonBase64.decodeBase64())
            googleServicesJsonFile.write(googleServicesJsonDecoded)
            println "google-services.json SUCCESSFULLY CREATED"
        }
    }
}

def loadStorePassword() {
    String storePassword = System.getenv("STORE_PASSWORD")
    if (storePassword == null) {
        println "STORE_PASSWORD ENVIRONMENT VARIABLE NOT FOUND"
        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
        storePassword = properties.getProperty("store.password")
    } else {
        println "STORE_PASSWORD ENVIRONMENT VARIABLE FOUND"
    }
    return storePassword
}

def loadKeyAlias() {
    String keyAlias = System.getenv("KEY_ALIAS")
    if (keyAlias == null) {
        println "KEY_ALIAS ENVIRONMENT VARIABLE NOT FOUND"
        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
        keyAlias = properties.getProperty("key.alias")
    } else {
        println "KEY_ALIAS ENVIRONMENT VARIABLE FOUND"
    }
    return keyAlias
}

def loadKeyPassword() {
    String keyPassword = System.getenv("KEY_PASSWORD")
    if (keyPassword == null) {
        println "KEY_PASSWORD ENVIRONMENT VARIABLE NOT FOUND"
        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
        keyPassword = properties.getProperty("key.password")
    } else {
        println "KEY_PASSWORD ENVIRONMENT VARIABLE FOUND"
    }
    return keyPassword
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation project(':core')
    implementation project(':resources')
    implementation project(':network')
    implementation project(':about')

    //ANDROID SUPPORT LIBRARIES
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.exifinterface:exifinterface:1.3.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    //FIREBASE
    implementation platform('com.google.firebase:firebase-bom:29.3.0')

    //CRASH REPORT
    implementation 'com.google.firebase:firebase-core'
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-analytics'

    //CLOUD MESSAGING
    implementation 'com.google.firebase:firebase-messaging'

    //REMOTE CONFIG
    implementation 'com.google.firebase:firebase-config'

    // UNIT TESTING
    testImplementation TestDependencies.junit
    // Set this dependency if you want to use Mockito
    testImplementation 'org.mockito:mockito-core:4.4.0'
    // Set this dependency if you want to use Hamcrest matching
    testImplementation 'org.hamcrest:hamcrest-core:2.2'
    androidTestImplementation 'org.hamcrest:hamcrest-core:2.2'

    androidTestImplementation 'androidx.annotation:annotation:1.3.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'

    //GMS
    implementation 'com.google.android.play:core:1.10.3'

    // DEPENDENCY INJECTION
    implementation ProjectDependencies.hiltAndroid
    kapt ProjectDependencies.hiltCompiler

    // For instrumentation tests
    androidTestImplementation ProjectDependencies.hiltAndroidTesting
    kaptAndroidTest ProjectDependencies.hiltCompiler

    // For local unit tests
    testImplementation ProjectDependencies.hiltAndroidTesting
    kaptTest ProjectDependencies.hiltCompiler

    implementation 'org.jsoup:jsoup:1.14.3'

    implementation "androidx.cardview:cardview:1.0.0"

}
apply plugin: 'com.google.gms.google-services'
